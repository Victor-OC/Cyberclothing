import React, { useEffect, useState, Suspense } from 'react';
import Head from 'next/head';
import Cookies from 'js-cookie';
import Dashboard from '@/components/Dashboard';
import styles from '@/styles/Backend.module.css';
import CryptoJS from 'crypto-js';
import { Box, Avatar, Breadcrumbs, Typography, Button } from '@mui/material';
import { MessageOutlined, PeopleOutline, NavigationOutlined, Inventory2Outlined } from '@mui/icons-material';
import Link from 'next/link';

const OrderChart = React.lazy(() => import('@/components/OrderChart'));
const BuySellChart = React.lazy(() => import('@/components/BuySellChart'));
const DashboardOrdersTable = React.lazy(() => import('@/components/DashboardOrdersTable'));

interface Vendor {
  email: string;
  password: string;
}

function decryptFunction(encryptedData: string): any {
  return CryptoJS.AES.decrypt(encryptedData, "key").toString(CryptoJS.enc.Utf8);
}

export default function Backend(): JSX.Element {
  const [vendorsData, setVendorsData] = useState<Vendor[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('../../vendors.json');
        const data = await response.json();
        setVendorsData(data);
        
        const encryptedData = Cookies.get('userData');
        if (encryptedData) {
          const decryptedData = decryptFunction(encryptedData);
          const user = JSON.parse(decryptedData) as Vendor;

          const matchedVendor = data.find((vendor: Vendor) => vendor.email === user.email && vendor.password === user.password);

          if (matchedVendor) {
            console.log('User is authenticated.');
          } else {
            redirectToLogin();
          }
        } else {
          redirectToLogin();
        }
      } catch (error) {
        console.error('Error fetching vendors:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  const redirectToLogin = () => {
    console.log('Redirecting to login page...');
    Cookies.remove('userData');
    window.location.href = '/backend/login';
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className={styles.main}>
        <Dashboard />
        <div style={{ display: 'flex', flexDirection: 'column', width: "100%" }}>
          <div className={styles.section}>
            <h2>DASHBOARD</h2>
            <h3>Cyberclothing Admin Panel</h3>
            <Breadcrumbs aria-label="breadcrumb">
              <Link color="inherit" href="/frontend">
                HOME
              </Link>
              <Typography color="text.primary">Dashboard</Typography>
            </Breadcrumbs>
          </div>
          <div className={styles.box}>
            <ul className={styles.div}>
              {[
                { title: 'Earnings', subtitle: 'This Month', value: '$ 6659', icon: <NavigationOutlined sx={{ color: "#05e177" }} />, bgcolor: "#05e177" },
                { title: 'Products', subtitle: 'This Month', value: '# 99', icon: <Inventory2Outlined sx={{ color: "#999" }} />, bgcolor: "#999" },
                { title: 'Messages', subtitle: 'This Month', value: '# 33', icon: <MessageOutlined sx={{ color: "#5098f8" }} />, bgcolor: "#5098f8" },
                { title: 'Vendors', subtitle: 'This Month', value: '# 143', icon: <PeopleOutline sx={{ color: "#b042ff" }} />, bgcolor: "#b042ff" },
              ].map((item, index) => (
                <li key={index}>
                  <Box sx={{ bgcolor: item.bgcolor, p: "30px 40px", borderRadius: 6, mr: 4, mb: 4 }}>
                    <div style={{ display: 'flex' }}>
                      <Avatar sx={{ bgcolor: "white", width: "60px", height: "60px" }}>
                        {item.icon}
                      </Avatar>
                      <div className={styles.boxText}>
                        <h2>{item.title}</h2>
                        <h3>{item.subtitle}</h3>
                        <h3>{item.value}</h3>
                      </div>
                    </div>
                  </Box>
                </li>
              ))}
            </ul>
          </div>
          <ul className={styles.div}>
            <li>
              <Suspense fallback={<div>Loading Chart...</div>}>
                <OrderChart />
              </Suspense>
            </li>
            <li>
              <div style={{ width: 600 }}>
                <Suspense fallback={<div>Loading Orders...</div>}>
                  <DashboardOrdersTable />
                </Suspense>
                <Link href="/backend/orders">
                  <Button variant='contained' sx={{ mt: 1 }}>
                    VIEW ALL ORDERS
                  </Button>
                </Link>
              </div>
            </li>
          </ul>
          <div className={styles.bschart}>
            <Suspense fallback={<div>Loading Buy/Sell Chart...</div>}>
              <BuySellChart />
            </Suspense>
          </div>
        </div>
      </div>
    </>
  );
}
